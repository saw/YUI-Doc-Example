<div class="highlight"><pre><span class="c">/**</span>
<span class="c"> * A javascript file compression library</span>
<span class="c"> * </span>
<span class="c"> * @module Compression</span>
<span class="c"> * @submodule lzw-binary</span>
<span class="c"> * @requires node, event</span>
<span class="c"> */</span>

 <span class="c">/**</span>
<span class="c">  * Implements the LZW compression algoritm, outputting</span>
<span class="c">  * binary using the Unicode character equivilant of the</span>
<span class="c">  * decimal codes</span>
<span class="c">  * @class lzw-binary</span>
<span class="c">  * @namespace saw</span>
<span class="c">  */</span>
  
   
    
<span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
    
    <span class="kd">var</span> <span class="nx">STARTPOINT</span> <span class="o">=</span> <span class="mi">256</span><span class="o">;</span>
    
    <span class="c">//create &quot;saw&quot; global if not there</span>
    <span class="k">if</span><span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">saw</span> <span class="o">===</span> <span class="kc">undefined</span><span class="p">){</span>
        <span class="nb">window</span><span class="p">.</span><span class="nx">saw</span> <span class="o">=</span> <span class="p">{};</span>
    <span class="p">}</span>
    <span class="c">/**</span>
<span class="c">     * Returns a pre-popuated dictionary to begin encoding</span>
<span class="c">     * @private</span>
<span class="c">     * @method getDic</span>
<span class="c">     * @return {Object} result a hash table with ascii letters as keys</span>
<span class="c">     */</span>
    <span class="kd">function</span> <span class="nx">getDic</span><span class="p">(){</span>
        <span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="p">{};</span>
        <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">STARTPOINT</span><span class="o">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">ch</span> <span class="o">=</span> <span class="nb">String</span><span class="p">.</span><span class="nx">fromCharCode</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
            <span class="nx">result</span><span class="p">[</span><span class="nx">ch</span><span class="p">]</span> <span class="o">=</span> <span class="nx">i</span><span class="o">;</span>
        <span class="p">};</span>
        <span class="k">return</span> <span class="nx">result</span><span class="o">;</span>
    <span class="p">}</span>
    
    <span class="c">/**</span>
<span class="c">     * Prepopulates translation table</span>
<span class="c">     * @private</span>
<span class="c">     * @method tTable</span>
<span class="c">     * @return {Object} translation table (hash table)</span>
<span class="c">     */</span>
    <span class="kd">function</span> <span class="nx">tTable</span><span class="p">(){</span>
        <span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="p">{};</span>
        <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">STARTPOINT</span><span class="o">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
            <span class="kd">var</span> <span class="nx">ch</span> <span class="o">=</span> <span class="nb">String</span><span class="p">.</span><span class="nx">fromCharCode</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
            <span class="nx">result</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">ch</span><span class="o">;</span>
        <span class="p">};</span>
        <span class="k">return</span> <span class="nx">result</span><span class="o">;</span>
    <span class="p">}</span>
    
    
    <span class="c">//Define the object and public methods</span>
    <span class="kd">var</span> <span class="nx">LZW</span> <span class="o">=</span> <span class="p">{</span>
        
<span class="c">/**</span>
<span class="c"> * Encodes the string as an LZW compressed binary stream...except</span>
<span class="c"> * because we can&#39;t really use binary in javascript we are using the unicode</span>
<span class="c"> * character specified by the decimal code output by the algorithm in each place</span>
<span class="c"> *</span>
<span class="c"> * @method encode</span>
<span class="c"> * @static</span>
<span class="c"> * @param {String} str The string to encode</span>
<span class="c"> * @return {String} str The encoded string</span>
<span class="c"> */</span> 
    <span class="nx">encode</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">str</span><span class="p">){</span>
            <span class="kd">var</span> <span class="nx">index</span> <span class="o">=</span> <span class="nx">STARTPOINT</span><span class="o">,</span> <span class="c">//start at 256, the first 255 are the ascii set</span>
            
            <span class="c">//initialize the dictionary</span>
            <span class="nx">dictionary</span> <span class="o">=</span> <span class="nx">getDic</span><span class="p">()</span><span class="o">,</span>
            <span class="c">//arr to hold output string</span>
            <span class="nx">outStr</span> <span class="o">=</span> <span class="p">[]</span><span class="o">,</span>
            
            <span class="c">//this will be the buffer</span>
            <span class="nx">s</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="o">;</span>

            <span class="kd">var</span> <span class="nx">len</span> <span class="o">=</span> <span class="nx">str</span><span class="p">.</span><span class="nx">length</span><span class="o">,</span> <span class="c">//for performance</span>
            <span class="nx">s</span> <span class="o">=</span> <span class="nx">str</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span> <span class="c">//lets start</span>
            
            <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">1</span><span class="o">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">len</span><span class="o">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">){</span>
                <span class="kd">var</span> <span class="nx">c</span> <span class="o">=</span> <span class="nx">str</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
                
                <span class="k">if</span><span class="p">(</span><span class="nx">dictionary</span><span class="p">[</span><span class="nx">s</span><span class="o">+</span><span class="nx">c</span><span class="p">]){</span> <span class="c">//already in the dictionary</span>
                    <span class="nx">s</span> <span class="o">=</span> <span class="nx">s</span><span class="o">+</span><span class="nx">c</span><span class="o">;</span>
                <span class="p">}</span><span class="k">else</span><span class="p">{</span> <span class="c">//need to add it to the dictionary</span>
                    <span class="kd">var</span> <span class="nx">code</span> <span class="o">=</span> <span class="o">++</span><span class="nx">index</span><span class="o">;</span>
                    
                    <span class="nx">outStr</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nb">String</span><span class="p">.</span><span class="nx">fromCharCode</span><span class="p">(</span><span class="nx">dictionary</span><span class="p">[</span><span class="nx">s</span><span class="p">]));</span>
                    <span class="nx">dictionary</span><span class="p">[</span><span class="nx">s</span><span class="o">+</span><span class="nx">c</span><span class="p">]</span> <span class="o">=</span> <span class="nx">code</span><span class="o">;</span>
                    <span class="nx">s</span> <span class="o">=</span> <span class="nx">c</span><span class="o">;</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span> <span class="k">in</span> <span class="nx">s</span> <span class="p">){</span>
                <span class="nx">outStr</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">s</span><span class="p">[</span><span class="nx">c</span><span class="p">]);</span>
            <span class="p">}</span>
            

        
            <span class="k">return</span> <span class="nx">outStr</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span>
        <span class="p">}</span><span class="o">,</span>
        
        <span class="nx">decode</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">str</span><span class="p">){</span>
            
            <span class="c">//init translation table</span>
             <span class="kd">var</span> <span class="nx">table</span> <span class="o">=</span> <span class="nx">tTable</span><span class="p">()</span><span class="o">,</span>
             
             <span class="c">//buffer will store the string we are working on</span>
             <span class="nx">buffer</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="o">,</span>
             
             <span class="c">//store the characters in an array as they are added</span>
             <span class="nx">outStr</span> <span class="o">=</span> <span class="p">[]</span><span class="o">,</span>
             
             <span class="c">//init first_code</span>
             <span class="nx">first_code</span> <span class="o">=</span> <span class="nx">str</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">,</span>
             
             <span class="c">//get string length for loop</span>
             <span class="nx">len</span> <span class="o">=</span> <span class="nx">str</span><span class="p">.</span><span class="nx">length</span><span class="o">,</span>
             
             <span class="c">//counter so we know where to start after the base table</span>
             <span class="nx">counter</span> <span class="o">=</span> <span class="nx">STARTPOINT</span><span class="o">-</span><span class="mi">1</span><span class="o">,</span>
             
             <span class="c">//this will be handy for the case where next_code does not exist in the table</span>
             <span class="nx">character</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="o">;</span>
             
             <span class="kd">var</span> <span class="nx">decodearr</span><span class="o">=</span> <span class="p">[];</span>
             <span class="c">//main decode loop</span>
             <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">len</span><span class="o">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
                 <span class="kd">var</span> <span class="nx">next_code</span> <span class="o">=</span> <span class="nx">str</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
                 <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">table</span><span class="p">[</span><span class="nx">next_code</span><span class="p">]){</span> <span class="c">//handles the exception case</span>
                     <span class="nx">buffer</span> <span class="o">=</span> <span class="nx">table</span><span class="p">[</span><span class="nx">first_code</span><span class="p">];</span>
                     <span class="nx">buffer</span> <span class="o">=</span> <span class="nx">buffer</span> <span class="o">+</span> <span class="nx">character</span><span class="o">;</span>
                 <span class="p">}</span><span class="k">else</span><span class="p">{</span>
                     <span class="c">//add decoded char to buffer</span>
                     <span class="nx">buffer</span> <span class="o">=</span> <span class="nx">table</span><span class="p">[</span><span class="nx">next_code</span><span class="p">];</span>
                 <span class="p">}</span>
                 
                 <span class="c">//add buffer to output</span>
                 <span class="nx">outStr</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">buffer</span><span class="p">);</span>
                 
                 
                 <span class="nx">character</span> <span class="o">=</span> <span class="nx">buffer</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
                 <span class="c">//add new substring to table</span>
                 <span class="nx">table</span><span class="p">[</span><span class="o">++</span><span class="nx">counter</span><span class="p">]</span> <span class="o">=</span> <span class="nx">table</span><span class="p">[</span><span class="nx">first_code</span><span class="p">]</span> <span class="o">+</span>
                                    <span class="nx">character</span><span class="o">;</span>
                                    
                 <span class="c">//time for the next char</span>
                 <span class="nx">first_code</span> <span class="o">=</span> <span class="nx">next_code</span><span class="o">;</span>
             <span class="p">};</span>
             
             <span class="k">return</span> <span class="nx">outStr</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s1">&#39;&#39;</span><span class="p">);</span>
        <span class="p">}</span><span class="o">,</span>
        
        <span class="c">/**</span>
<span class="c">         * Utitilty method that returns the size of a unicode string in bytes</span>
<span class="c">         * @method strSize</span>
<span class="c">         * @param {String} str The string to evaluate</span>
<span class="c">         * @return {Number} num the length of the string in bytes</span>
<span class="c">         */</span>
        <span class="nx">strSize</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">str</span><span class="p">){</span>

            <span class="k">return</span> <span class="nb">encodeURIComponent</span><span class="p">(</span><span class="nx">str</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/%../g</span><span class="o">,</span> <span class="s1">&#39;x&#39;</span><span class="p">).</span><span class="nx">length</span><span class="o">;</span>
        <span class="p">}</span>
        
    <span class="p">};</span>
    
    <span class="nb">window</span><span class="p">.</span><span class="nx">saw</span><span class="p">.</span><span class="nx">lzw</span> <span class="o">=</span> <span class="nx">LZW</span><span class="o">;</span>


<span class="p">}());</span>
</pre></div>
