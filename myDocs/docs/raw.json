{"majorversion": 3, "filemap": {"lzw.js": {"classlist": ["Y.saw.lzw"], "name": "lzw.js", "module": "Compression"}, "timepickerwidget.js": {"classlist": ["Y.Saw.Timepicker"], "name": "timepickerwidget.js", "module": "Compression"}}, "modules": {"widget": {"description": "Great widgets from saw", "submodules": [], "classlist": ["Y.Saw.Timepicker"], "filelist": [], "subdata": {}, "requires": "oop, event-custom, attribute, base, dom, classnamemanager, widget, event", "name": "widget"}, "Compression": {"description": "A javascript file compression library", "submodules": [], "classlist": ["Y.saw.lzw"], "filelist": ["lzw.js", "timepickerwidget.js"], "subdata": {}, "name": "Compression"}}, "classmap": {"Y.Saw.Timepicker": {"name": "Y.Saw.Timepicker", "configs": {"time": {"default": "{hour:0, minute:0, ampm:'AM'}", "type": "Object", "description": "The selected time (overwritten by mouse events)", "guessedname": "time", "guessedtype": "property"}}, "constructors": [{"description": "A YUI 3 timepicker widget"}], "namespace": "Y.Saw", "module": "widget", "events": {"timeChange": {"params": [{"type": "Event.Facade", "name": "event", "description": "An Event Facade object with      the following attribute specific properties added:\t<dl>\t\t<dt>prevVal</dt>\t\t<dd>The value of the attribute, prior to it being set</dd>\t\t<dt>newVal</dt>\t\t<dd>The value the attribute is to be set to</dd>\t\t<dt>attrName</dt>\t\t<dd>The name of the attribute being set</dd>\t\t<dt>subAttrName</dt>\t\t<dd>If setting a property within the attribute's value,           the name of the sub-attribute property being set</dd>\t</dl>"}], "name": "timeChange", "description": "Fires when the value for the configuration attribute 'time' is changed. You can listen for the event using the <a href=\"Attribute.html#method_on\">on</a> method if you wish to be notified before the attribute's value has changed, or using the <a href=\"Event.Target.html#method_after\">after</a> method if you wish to be notified after the attribute's value has changed."}, "dawn": {"params": [{"type": "String", "name": "color", "description": ""}, {"type": "Number", "name": "duration", "description": ""}], "description": "Fires when a new day begins", "guessedname": "destructor", "guessedtype": "function"}}, "methods": {"_syncTime": {"protected": "", "description": "This method syncs the value of time object,\nincluding building the strings for 12hr and 24hr\nalso fires a 'timechange' event", "guessedname": "_syncTime", "guessedtype": "function"}, "toggle": {"description": "Show/hide the widget", "guessedname": "toggle", "guessedtype": "function"}, "pad": {"type": "String|Object|Array|Boolean|Number", "returns": "{String} padded number as string", "protected": "", "params": [{"type": "Number", "name": "num", "description": " the number to bad"}], "description": "Pad numbers to two digits"}, "makeCell": {"returns": "{String} returns the assembled html string", "protected": "", "params": [{"type": "String", "name": "str", "description": " The contents of the cell"}, {"type": "String", "name": "rowId", "description": " the unique classname for the row to identify it later"}], "description": "Creates a cell based on the little template defined in \"str\""}}, "extends": "Widget", "superclass": "Widget", "file": "timepickerwidget.js", "shortname": "Timepicker", "properties": {"Timepicker.ATTRS": {"type": "Object", "protected": "", "static": "", "guessedname": "ATTRS", "guessedtype": "property"}, "AM": {"type": "String", "description": "Symbol for AM"}}, "description": "A YUI 3 timepicker widget"}, "Y.saw.lzw": {"name": "Y.saw.lzw", "namespace": "Y.saw", "module": "Compression", "methods": {"encode": {"return": {"type": "String", "description": "str The encoded string"}, "description": "Encodes the string as an LZW compressed binary stream...except\nbecause we can't really use binary in javascript we are using the unicode\ncharacter specified by the decimal code output by the algorithm in each place", "static": "", "guessedname": "encode", "guessedtype": "function", "params": [{"type": "String", "name": "str", "description": " The string to encode"}]}, "tTable": {"return": {"type": "Object", "description": "translation table (hash table)"}, "description": "Prepopulates translation table", "private": ""}, "getDic": {"return": {"type": "Object", "description": "result a hash table with ascii letters as keys"}, "description": "Returns a pre-popuated dictionary to begin encoding", "private": ""}, "strSize": {"return": {"type": "Number", "description": "num the length of the string in bytes"}, "params": [{"type": "String", "name": "str", "description": " The string to evaluate"}], "description": "Utitilty method that returns the size of a unicode string in bytes", "guessedname": "strSize", "guessedtype": "function"}}, "file": "lzw.js", "shortname": "lzw", "description": "Implements the LZW compression algoritm, outputting\nbinary using the Unicode character equivilant of the\ndecimal codes"}}, "version": "0.0.1", "namespaces": ["Y.saw", "Y.Saw"]}